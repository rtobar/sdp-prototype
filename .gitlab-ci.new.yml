# -----------------------------------------------------------------------------
# Stage definitions
# -----------------------------------------------------------------------------

stages:
  - pre-check    # Run quick pre-checks
  - test         # Run tests which do not require building artifacts
  - post-test    # Run post test analysis (coverage reports etc)
  - build        # Build artifacts
  - test-build   # Run tests against built artifacts
  - publish      # Publish artifacts to artifact repos
  - deploy       # Deploy to staging / development cluster
  - test-deploy  # Test deployment
  - pages        # Publish github pages


# https://blog.sparksuite.com/7-ways-to-speed-up-gitlab-ci-cd-times-29f60aab69f9
variables:
  DOCKER_DRIVER: overlay2

# -----------------------------------------------------------------------------
# Include jobs descriptions
# -----------------------------------------------------------------------------

include:
  # Jobs to build and test Docker base images.
  - local: '/docker/gitlab-ci-templates.yml'
  - local: '/docker/pytango/gitlab-ci-jobs.yml'
  - local: '/docker/pytango-orca-dev/gitlab-ci-jobs.yml'
  - local: '/docker/ska-lmc-baseclasses/gitlab-ci-jobs.yml'

  # Jobs to build services in the src directory.
  - local: '/src/gitlab-ci-templates.yml'
  - local: '/src/tango_sdp_subarray/gitlab-ci-jobs.yml'

# -----------------------------------------------------------------------------
# pre-check stage
# -----------------------------------------------------------------------------

#checks:
#  stage: pre-check
#  script:
#    - echo "$CI_COMMIT_TAG"

# Build documentation
build_docs:
  stage: pre-check
  when: manual
  image: python:3.7-alpine3.10
  before_script:
    - apk add make
    - pip install -r docs/requirements.txt
  script:
    - make -C docs html
  artifacts:
    paths: [docs/build/html/]
    expire_in: 1 day


## -----------------------------------------------------------------------------
## Post test stage : Generate reports
## -----------------------------------------------------------------------------
#
## Generate combined test coverage report
#coverage_report:
#  stage: post_test
#  tags: [docker]
#  image: python:latest
#  before_script:
#    - pip install coverage
#  script:
#    - coverage combine *.coverage
#  after_script:
#    - coverage report
#    - coverage html
#  coverage: '/TOTAL\s+\d+\s+\d+\s+\d+\s+\d+\s+(\d+\%)/'
#  artifacts:
#    paths: [htmlcov/]
#    expire_in: 1 week
#  allow_failure: true
#
## Create an XRay test execution report
## (currently only for the SDPSubarray tests)
#.xray_report:
#  stage: post_test
#  tags: [docker]
#  image: python:latest
#  script:
#    - 'curl -X POST -H "Content-Type: application/json"
#         -H "Authorization: Basic $JIRA_AUTH"
#         --data @cucumber.json
#         https://jira.skatelescope.org/rest/raven/1.0/import/execution/cucumber'
#  retry: 2 # In case JIRA doesn't work first time
#
## Update XRay links in JIRA automatically This is done only for the master
#xray_report:
#  extends: .xray_report
#  only: [master]
#
## Update XRay links in JIRA. Manual job that can be executed for branches
#xray_report-manual:
#  extends: .xray_report
#  when: manual
#  except: [master]
#
## ----------------------------------------------------------------------------
## Pages stages : publish coverage report to gitlab pages
## ----------------------------------------------------------------------------
#
## Generate gitlab pages.
#pages:
#  stage: pages
#  tags: [docker]
#  only: [master]
#  image: python:latest
#  script:
#    - cp -R htmlcov public
#  artifacts:
#    paths: [public/]
